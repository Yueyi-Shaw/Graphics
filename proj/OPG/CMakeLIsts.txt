cmake_minimum_required(VERSION 3.13)

project(OPG_LABS VERSION 1.0)

# compiler flag
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
set(CMAKE_DEBUG_POSTFIX "_d")

if(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Od")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g0")
endif()

#----------------------------------------------------SET OUTPUT PATH------------------------------------------------------------
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
# for multi-config builds (e.g. msvc)
foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
    set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/bin )
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/lib )
    set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/lib )
endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

#----------------------------------------------------THIRD PARTY LIBS-----------------------------------------------------------
# opengl
find_package(OpenGL REQUIRED)

# glfw
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
add_subdirectory(external/glfw)

# assimp
set(ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(ASSIMP_INSTALL OFF CACHE BOOL "" FORCE)
set(BUILD_ASSIMP_TOOLS OFF CACHE BOOL "" FORCE) # 不需要Assimp提供的工具
set(ASSIMP_BUILD_ALL_IMPORTERS_BY_DEFAULT OFF) # 不编译所有导入器
set(ASSIMP_BUILD_OBJ_IMPORTER ON CACHE BOOL "") # 编译OBJ导入器
set(ASSIMP_BUILD_FBX_IMPORTER ON CACHE BOOL "") # 编译FBX导入器
set(ASSIMP_BUILD_GLTF_IMPORTER ON CACHE BOOL "") # 编译GLTF导入器
set(ASSIMP_NO_EXPORT ON CACHE BOOL "") # 关闭所有导出器
add_subdirectory(external/assimp)
if(MSVC)
    set_target_properties(assimp PROPERTIES OUTPUT_NAME assimp)
endif()

# imgui
add_subdirectory(external/imgui)
target_link_libraries(imgui PUBLIC glfw)

# glm
add_subdirectory(external/glm)

#----------------------------------------------------BUILD OWN LIBS-----------------------------------------------------------
# vermilion
add_library(vermilion
            vermilion/lib/gl3w.c
            vermilion/lib/LoadShaders.cpp
            vermilion/lib/targa.cpp
            vermilion/lib/vdds.cpp
            vermilion/lib/loadtexture.cpp
            vermilion/lib/vermilion.cpp
            vermilion/lib/vbm.cpp
)

#----------------------------------------------------INCLUDE FILES PATH----------------------------------------------------------
#include
include_directories(${CMAKE_SOURCE_DIR}/include)
include_directories(external/glfw/include)
include_directories(external/assimp/include)
include_directories(external/imgui)
include_directories(external/glm)

#----------------------------------------------------LINKING LIBS PATH-----------------------------------------------------------
link_directories(${CMAKE_BINARY_DIR}/lib)

#----------------------------------------------------LINK EXECUTABLE AND LIBS----------------------------------------------------
set(LIBS vermilion ${OPENGL_LIBRARIES} optimized glfw3 assimp imgui debug glfw3_d assimp_d imgui_d)

#----------------------------------------------------COMPILE EXECUTABLE----------------------------------------------------------
# header
set(COMMON_HEADERS include/vgl.h include/vapp.h)

# run dir
set(RUN_DIR ${PROJECT_SOURCE_DIR}/bin)

# lab list
set(OPG_LABS
  0-1-imguiDemo
  0-2-assimpDemo
  0-3-glmDemo
  0-4-dragonDemo
  1-1-keypress
  1-1-triangles
  2-1-shader
  2-2-advanced
  3-1-primitives
  3-2-buffers
)

# add src to executable
if(MSVC)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:CONSOLE")
endif()

foreach(LAB ${OPG_LABS})
    add_executable(${LAB} WIN32 src/${LAB}/${LAB}.cpp ${COMMON_HEADERS})
    set_property(TARGET ${LAB} PROPERTY DEBUG_POSTFIX _d)
    if(MSVC)
        set_property(TARGET ${LAB} PROPERTY VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
    endif()
    target_link_libraries(${LAB} ${LIBS})
    # Add dependency on glfw for OPG_LABS
    add_dependencies(${LAB} glfw assimp)
endforeach(LAB)

if (CMAKE_BUILD_TYPE MATCHES "Debug")
    add_compile_definitions(_DEBUG)
endif()

ADD_CUSTOM_TARGET(debug ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE:STRING=Debug ${PROJECT_SOURCE_DIR})
ADD_CUSTOM_TARGET(release ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE:STRING=Release ${PROJECT_SOURCE_DIR})

#----------------------------------------------------COPY ASSET TO BUILD DIR-----------------------------------------------------
message("Copying resources directory to build directory")
set(SOURCE_DIR ${CMAKE_SOURCE_DIR}/media)
set(TARGET_DIR ${CMAKE_BINARY_DIR}/bin)
file(COPY ${SOURCE_DIR} DESTINATION ${TARGET_DIR})